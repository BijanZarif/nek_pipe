c-----------------------------------------------------------------------
c  Pipe-Poiseuille flow
c  jcanton@mech.kth.se
c-----------------------------------------------------------------------

      subroutine uservp (ix,iy,iz,ieg)

         implicit none

         include 'SIZE_DEF'
         include 'SIZE'  ! LDIMT needed by NEKUSE
         include 'NEKUSE_DEF'
         include 'NEKUSE' ! udiff, utrans

         integer, intent(in) :: ix,iy,iz,ieg

         udiff = 0.0
         utrans = 0.0

      return
      end

c-----------------------------------------------------------------------

      subroutine userf  (ix,iy,iz,ieg)

         implicit none

         include 'SIZE_DEF'
         include 'SIZE'  ! LDIMT needed by NEKUSE
         include 'NEKUSE_DEF'
         include 'NEKUSE' ! ff[xyz]
         include 'INPUT_DEF'
         include 'INPUT' ! IFPERT

         integer, intent(in) :: ix,iy,iz,ieg

         if (ifpert) then
            ! perturbation mode
            ! adjoint problem
            ! (time goes backward)
            ffx = 0.0
            ffy = 0.0
            ffz = 0.0
         else
            ! non-linear mode
            ! direct problem
            ! (time goes forward)
            ffx = 0.0
            ffy = 0.0
            ffz = 1.0
         endif

      return
      end

c-----------------------------------------------------------------------

      subroutine userq  (ix,iy,iz,ieg)

         implicit none

         include 'SIZE_DEF'
         include 'SIZE'  ! LDIMT needed by NEKUSE
         include 'NEKUSE_DEF'
         include 'NEKUSE' ! qvol

         integer, intent(in) :: ix,iy,iz,ieg

         QVOL = 0.0
         ! SOURCE = 0.0 (cannot find where this is defined)

      return
      end

c-----------------------------------------------------------------------

      subroutine userchk

         use nonlinadj ! nladj_fwd_bkw(), nlopt_update()
         use misc_stuff ! kinetic_energy()

         implicit none

         include 'SIZE_DEF' ! nx1, ny1, nz1, nelv
         include 'SIZE'
         include 'TSTEP_DEF' ! ISTEP
         include 'TSTEP'
         include 'SOLN_DEF' ! v[xyz], pr
         include 'SOLN'
         include 'MASS_DEF' ! bm1
         include 'MASS'
         include 'USERPAR' ! usr_debug

         integer :: nn
         real    :: ek, ek_scale
         !real, external :: glmax, glmin, glsum ! math.f

         !--------------------------------------------------------------
         ! Initialise stuff
         !
         nn = nx1*ny1*nz1*nelv

         !--------------------------------------------------------------
         ! Rescale random initial condition field
         ! to set the kinetic energy to Ek_0
         ! TODO add reading restart here
         !
         if (istep.eq.0) then
            ! Measure kinetic energy
            ek = kinetic_energy(vx, vy, vz)
            ! Rescale velocity field to have ek = nlopt_e0
            ek_scale = sqrt(nlopt_e0/ek)
            ! v[xyz] = ek_scale*v[xyz]
            call cmult(vx, ek_scale, nn)
            call cmult(vy, ek_scale, nn)
            call cmult(vz, ek_scale, nn)
            !
            if (usr_debug.gt.0) then
               ! Output initial condition
               call outpost(vx,vy,vz,pr,t,'ini')
               ek = kinetic_energy(vx, vy, vz)
               if (nid.eq.0) write(*,*) 'nlopt_Ek = ', nlopt_e0
               if (nid.eq.0) write(*,*) 'Ek       = ', ek
            endif
         endif

         !--------------------------------------------------------------
         ! Compute non-linear optimal
         !
         call compute_nlopt(1, 1)
         call exitt()

      return
      end

c-----------------------------------------------------------------------

      subroutine userbc (ix,iy,iz,iside,ieg)

         implicit none

         include 'SIZE_DEF'
         include 'SIZE' ! LDIMT needed by NEKUSE
         include 'NEKUSE_DEF'
         include 'NEKUSE' ! u[xyz], [xyz]

         integer, intent(in) :: ix,iy,iz,iside,ieg

         ux = 0.0
         uy = 0.0
         uz = 0.0

      return
      end

c-----------------------------------------------------------------------

      subroutine useric (ix,iy,iz,ieg)

         implicit none

         include 'SIZE_DEF'
         include 'SIZE'  ! LDIMT needed by NEKUSE
         include 'NEKUSE_DEF'
         include 'NEKUSE' ! u[xyz], [xyz]

         integer, intent(in) :: ix,iy,iz,ieg

         ! initialize to random number,
         ! uniformly distributed between 0 and 1
         call random_number(ux)
         call random_number(uy)
         call random_number(uz)

         ! rescale to have uniform distribution between -1 and 1
         ux = (ux - 0.5)*2
         uy = (uy - 0.5)*2
         uz = (uz - 0.5)*2

      return
      end

c-----------------------------------------------------------------------

      subroutine usrdat

         implicit none

         ! need to uncomment this and the other line if compiling with
         ! -g -O0 options
         !
         ! integer :: Adam_I_hate_you

         ! Read user module parameters
         call uprm_read

         ! Adam_I_hate_you = 42

      return
      end

c-----------------------------------------------------------------------

      subroutine usrdat2

         implicit none

      return
      end

c-----------------------------------------------------------------------

      subroutine usrdat3

         use randgen ! init_random_seed()

         implicit none

         ! initialise random number generator
         call init_random_seed()

      return
      end

c------------------------------------------------------------------------
