c-----------------------------------------------------------------------
c  Pipe-Poiseuille flow
c  jcanton@mech.kth.se
c-----------------------------------------------------------------------

      subroutine uservp (ix,iy,iz,ieg)

         implicit none

         include 'SIZE_DEF'
         include 'SIZE'  ! LDIMT needed by NEKUSE
         include 'NEKUSE_DEF'
         include 'NEKUSE' ! udiff, utrans

         integer, intent(in) :: ix,iy,iz,ieg

         udiff = 0.0
         utrans = 0.0

      return
      end

c-----------------------------------------------------------------------

      subroutine userf  (ix,iy,iz,ieg)

         implicit none

         include 'SIZE_DEF'
         include 'SIZE'  ! LDIMT needed by NEKUSE
         include 'NEKUSE_DEF'
         include 'NEKUSE' ! ff[xyz]
         include 'INPUT_DEF'
         include 'INPUT' ! IFPERT

         integer, intent(in) :: ix,iy,iz,ieg

         if (ifpert) then
            ! perturbation mode
            ! adjoint problem
            ! (time goes backward)
            ffx = 0.0
            ffy = 0.0
            ffz = 0.0
         else
            ! non-linear mode
            ! direct problem
            ! (time goes forward)
            ffx = 0.0
            ffy = 0.0
            ffz = 1.0
         endif

      return
      end

c-----------------------------------------------------------------------

      subroutine userq  (ix,iy,iz,ieg)

         implicit none

         include 'SIZE_DEF'
         include 'SIZE'  ! LDIMT needed by NEKUSE
         include 'NEKUSE_DEF'
         include 'NEKUSE' ! qvol

         integer, intent(in) :: ix,iy,iz,ieg

         QVOL = 0.0
         ! SOURCE = 0.0 (cannot find where this is)

      return
      end

c-----------------------------------------------------------------------

      subroutine userchk

         use nonlinadj ! fwd_bkw_rvlv()

         implicit none

         include 'SIZE_DEF' ! LDMT1
         include 'SIZE'
         include 'TSTEP_DEF' ! ISTEP
         include 'TSTEP'
         include 'INPUT_DEF' ! param()
         include 'INPUT'
         include 'SOLN_DEF' ! v[xyz], pr
         include 'SOLN'
         include 'USERPAR' ! usr_debug, rvlv_info, rvlv_snaps


         if (usr_debug.gt.0) then
            ! Output initial condition
            if (istep.eq.0) then
               call outpost(vx,vy,vz,pr,t,'ini')
            endif
         endif

         ! call forward-backward iteration with revolve
         if (usr_debug.gt.0) then
            if (nid.eq.0) write(*,*) 'final time = ', param(11)
         endif
         call fwd_bkw_rvlv(0, int(param(11)), rvlv_snaps, rvlv_info)
         call exitt()

      return
      end

c-----------------------------------------------------------------------

      subroutine userbc (ix,iy,iz,iside,ieg)

         implicit none

         include 'SIZE_DEF'
         include 'SIZE'  ! LDIMT needed by NEKUSE
         include 'NEKUSE_DEF'
         include 'NEKUSE' ! u[xyz], [xyz]

         integer, intent(in) :: ix,iy,iz,iside,ieg

         ux =  0.0
         uy =  0.0
         uz =  0.0

      return
      end

c-----------------------------------------------------------------------

      subroutine useric (ix,iy,iz,ieg)

         use randgen ! rnd_loc()

         implicit none

         include 'SIZE_DEF'
         include 'SIZE'  ! LDIMT needed by NEKUSE
         include 'NEKUSE_DEF'
         include 'NEKUSE' ! u[xyz], [xyz]
         include 'USERPAR' ! nlopt_e0

         integer, intent(in) :: ix,iy,iz,ieg

         if (usr_debug.gt.0) then
            if (ieg.eq.1 .and. ix.eq.1 .and. iy.eq.1 .and. iz.eq.1) then
               write(*,*) 'nlopt_e0 = ', nlopt_e0
            endif
         endif
         ux = nlopt_e0*rnd_loc(-1.0, 1.0)
         uy = nlopt_e0*rnd_loc(-1.0, 1.0)
         uz = nlopt_e0*rnd_loc(-1.0, 1.0)

      return
      end

c-----------------------------------------------------------------------

      subroutine usrdat

         use randgen ! zbqlini()

         implicit none

         include 'SIZE_DEF'
         include 'SIZE' ! NID
         include 'PARALLEL_DEF' 
         include 'PARALLEL' ! WDSIZE
         include 'USERPAR'

         integer :: iseed
         real, external :: dnekclock ! defined in comm_mpi.f

         ! Read user module parameters
         call uprm_read


         ! initialise random number generator from the 'randgen' module
         ! only on rank=0
         if (NID.eq.0) then
            iseed = int(dnekclock())
            call zbqlini(iseed)
         endif
         call bcast(zbqlix, WDSIZE)

      return
      end

c-----------------------------------------------------------------------

      subroutine usrdat2

         implicit none

      return
      end

c-----------------------------------------------------------------------

      subroutine usrdat3

         implicit none

      return
      end

c------------------------------------------------------------------------
